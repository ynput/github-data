---

# TODO need strategy where to store defaults - which an be overriden by repo var

name: Github Release Information
description: Fetch and convert data from github to use for a release trigger

branding:
  icon: plus
  color: green

inputs:
  repo:
    description: Repository to query data from in the format of <owner>/<repo-name>
    required: true
  date:
    description: Starting date to start query from.
    required: true
  query_parameters:
    description: Parameters to query for in pr Information
    required: true

outputs:
  raw-output:
    description: Full output json dictionary from github api.
    value: ${{ steps.raw-output.outputs.raw_output }}
  label-list:
    description: List of unique labels found in PRs.
    value: ${{ steps.get-labels-list.outputs.label_list }}
  bump-increment:
    description: Increment for version bumping - either `patch` or 'minor'
    value: ${{ steps.bump-increment.outputs.increment }}
  # changelog-markdown:
  #   description: String containing full makrdown syntax for release changelog information
  #   value: ${{ steps.write-changelog.outputs.changelog }}

runs:
  using: composite

  steps:
    - name: Get raw GitHub output
      id: raw-output
      shell: bash
      run: |
        raw_output=$(gh pr list --state merged --search 'merged:>=${{ inputs.date }}' --json ${{ inputs.query_parameters }} --repo ${{ inputs.repo }})
        if [[ "$raw_output" == '[]' ]]; then
          echo "raw_output=''" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "raw_output=$raw_output" >> $GITHUB_OUTPUT

    - name: Get label list
      id: get-labels-list
      shell: bash
      run: |
        cd $GITHUB_ACTION_PATH
        label_list=$(python github_query.py pr-labels "${{ inputs.repo }}" "${{ inputs.query_parameters }}" "${{ inputs.date }}")
        echo "label_list=$label_list" >> $GITHUB_OUTPUT

    - name: Get version increment
      id: bump-increment
      shell: bash
      run: |
        cd $GITHUB_ACTION_PATH
        increment=$(python github_query.py version-increment "${{ inputs.repo }}" "${{ inputs.query_parameters }}" "${{ inputs.date }}")
        echo "increment=$increment" >> $GITHUB_OUTPUT

    # disabled until fixed
    # - name: Prepare Changelog 
    #   id: write-changelog
    #   shell: bash
    #   run: |
    #     cd $GITHUB_ACTION_PATH
    #     changelog=$(python -c 'import github_query; gh_query = github_query.parse_args(); patch_repo_var = github_query.get_repo_var(repo="${{ inputs.repo }}", var_name="PATCH_BUMP_LABEL"); minor_repo_var = github_query.get_repo_var(repo="${{ inputs.repo }}", var_name="MINOR_BUMP_LABEL"); print(github_query.prepare_changelog_markdown(pr_query=gh_query, minor_bump_list=minor_repo_var, patch_bump_list=patch_repo_var))' "${{ inputs.repo }}" "${{ inputs.query_parameters }}" "${{ inputs.date }}")
    #     oneline_changelog=$(echo "$changelog" | base64 | tr -d '/n')
    #     echo "oneline changelog: $oneline_changelog"
    #     # echo "changelog=$oneline_changelog" >> $GITHUB_OUTPUT

...
